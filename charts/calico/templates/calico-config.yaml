# This ConfigMap is used to configure a self-hosted calico installation.
kind: ConfigMap
apiVersion: v1
metadata:
  name: calico-config
  namespace: kube-system
data:
{{- if eq .Values.datastore "etcd" }}
  # Configure this with the location of your etcd cluster.
  etcd_endpoints: "{{ required "must set etcd.endpoints if using etcd mode" .Values.etcd.endpoints }}"

{{- if include "calico.etcd.tls" . }}
  etcd_ca: "/calico-secrets/etcd-ca"
  etcd_cert: "/calico-secrets/etcd-cert"
  etcd_key: "/calico-secrets/etcd-key"
{{- else }}
  # If you're using TLS enabled etcd uncomment the following.
  # You must also populate the Secret below with these files.
  etcd_ca: ""   # "/calico-secrets/etcd-ca"
  etcd_cert: "" # "/calico-secrets/etcd-cert"
  etcd_key: ""  # "/calico-secrets/etcd-key"
{{- end }}

{{- end }}
{{- if .Values.typha.enabled }}
  # You must set a non-zero value for Typha replicas below.
  typha_service_name: "calico-typha"
{{- else }}
  # Typha is disabled.
  typha_service_name: "none"

{{- end }}

  # Configure the backend to use.
  calico_backend: "bird"
  # Configure the MTU to use
  veth_mtu: {{ .Values.veth_mtu | default "1400" | quote }}


  cni_network_config: |-
    {
      "name": "k8s-pod-network",
      "cniVersion": "0.3.1",
      "plugins": [
        {
          "type": "calico",
          "log_level": "info",
  {{- if eq .Values.datastore "etcd" }}
          "etcd_endpoints": "__ETCD_ENDPOINTS__",
          "etcd_key_file": "__ETCD_KEY_FILE__",
          "etcd_cert_file": "__ETCD_CERT_FILE__",
          "etcd_ca_cert_file": "__ETCD_CA_CERT_FILE__",
  {{- else if eq .Values.datastore "kubernetes" }}
          "datastore_type": "kubernetes",
          "nodename": "__KUBERNETES_NODE_NAME__",
  {{- end }}
          "mtu": __CNI_MTU__,
          "ipam": {
              "type": "calico-ipam"
          },
          "policy": {
              "type": "k8s"
          },
          "kubernetes": {
              "kubeconfig": "__KUBECONFIG_FILEPATH__"
          }
        },
        {
          "type": "portmap",
          "snat": true,
          "capabilities": {"portMappings": true}
        }
      ]
    }