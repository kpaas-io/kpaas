// Code generated by protoc-gen-go. DO NOT EDIT.
// source: deploy_controller.proto

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	deploy_controller.proto

It has these top-level messages:
	Auth
	SSH
	Node
	Error
	TestConnectionRequest
	TestConnectionReply
	NodeCheckConfig
	CheckNodesRequest
	CheckNodesReply
	CheckItem
	ItemCheckResult
	NodeCheckResult
	GetCheckNodesResultRequest
	GetCheckNodesResultReply
	NodePortRange
	Keepalived
	Loadbalancer
	KubeAPIServerConnect
	ClusterConfig
	Taint
	NodeDeployConfig
	DeployRequest
	DeployReply
	GetDeployResultRequest
	DeployItem
	DeployItemResult
	GetDeployResultReply
	FetchKubeConfigRequest
	FetchKubeConfigReply
	CalicoOptions
	NetworkOptions
	CheckNetworkRequirementRequest
	ConnectivityCheckResult
	CheckNetworkRequirementsReply
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Auth struct {
	// type could be ["password", "privatekey"]
	Type string `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	// credential stores the content of password or privatekey
	Credential string `protobuf:"bytes,2,opt,name=credential" json:"credential,omitempty"`
	// username is the user name used for password auth.
	Username string `protobuf:"bytes,3,opt,name=username" json:"username,omitempty"`
}

func (m *Auth) Reset()                    { *m = Auth{} }
func (m *Auth) String() string            { return proto.CompactTextString(m) }
func (*Auth) ProtoMessage()               {}
func (*Auth) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Auth) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Auth) GetCredential() string {
	if m != nil {
		return m.Credential
	}
	return ""
}

func (m *Auth) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

// SSH contains the ssh login info.
type SSH struct {
	Port uint32 `protobuf:"varint,1,opt,name=port" json:"port,omitempty"`
	Auth *Auth  `protobuf:"bytes,2,opt,name=auth" json:"auth,omitempty"`
}

func (m *SSH) Reset()                    { *m = SSH{} }
func (m *SSH) String() string            { return proto.CompactTextString(m) }
func (*SSH) ProtoMessage()               {}
func (*SSH) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SSH) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *SSH) GetAuth() *Auth {
	if m != nil {
		return m.Auth
	}
	return nil
}

// Node contains the node metadata info
type Node struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Ip   string `protobuf:"bytes,2,opt,name=ip" json:"ip,omitempty"`
	Ssh  *SSH   `protobuf:"bytes,3,opt,name=ssh" json:"ssh,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Node) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Node) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Node) GetSsh() *SSH {
	if m != nil {
		return m.Ssh
	}
	return nil
}

type Error struct {
	Reason     string `protobuf:"bytes,1,opt,name=reason" json:"reason,omitempty"`
	Detail     string `protobuf:"bytes,2,opt,name=detail" json:"detail,omitempty"`
	FixMethods string `protobuf:"bytes,3,opt,name=fixMethods" json:"fixMethods,omitempty"`
}

func (m *Error) Reset()                    { *m = Error{} }
func (m *Error) String() string            { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()               {}
func (*Error) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Error) GetReason() string {
	if m != nil {
		return m.Reason
	}
	return ""
}

func (m *Error) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

func (m *Error) GetFixMethods() string {
	if m != nil {
		return m.FixMethods
	}
	return ""
}

// TestConnectionRequest contains the request of node connection testing.
type TestConnectionRequest struct {
	Node *Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *TestConnectionRequest) Reset()                    { *m = TestConnectionRequest{} }
func (m *TestConnectionRequest) String() string            { return proto.CompactTextString(m) }
func (*TestConnectionRequest) ProtoMessage()               {}
func (*TestConnectionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *TestConnectionRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

// TestConnectionReply contains the result of node connection testing.
type TestConnectionReply struct {
	Passed bool   `protobuf:"varint,1,opt,name=passed" json:"passed,omitempty"`
	Err    *Error `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *TestConnectionReply) Reset()                    { *m = TestConnectionReply{} }
func (m *TestConnectionReply) String() string            { return proto.CompactTextString(m) }
func (*TestConnectionReply) ProtoMessage()               {}
func (*TestConnectionReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *TestConnectionReply) GetPassed() bool {
	if m != nil {
		return m.Passed
	}
	return false
}

func (m *TestConnectionReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

// NodeCheckConfig contains the pre-checking configuration for a node
type NodeCheckConfig struct {
	Node  *Node    `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	Roles []string `protobuf:"bytes,2,rep,name=roles" json:"roles,omitempty"`
}

func (m *NodeCheckConfig) Reset()                    { *m = NodeCheckConfig{} }
func (m *NodeCheckConfig) String() string            { return proto.CompactTextString(m) }
func (*NodeCheckConfig) ProtoMessage()               {}
func (*NodeCheckConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NodeCheckConfig) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *NodeCheckConfig) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

// CheckNodesRequest contains the request of node pre-checking.
type CheckNodesRequest struct {
	Configs        []*NodeCheckConfig `protobuf:"bytes,1,rep,name=configs" json:"configs,omitempty"`
	NetworkOptions *NetworkOptions    `protobuf:"bytes,2,opt,name=networkOptions" json:"networkOptions,omitempty"`
}

func (m *CheckNodesRequest) Reset()                    { *m = CheckNodesRequest{} }
func (m *CheckNodesRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckNodesRequest) ProtoMessage()               {}
func (*CheckNodesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *CheckNodesRequest) GetConfigs() []*NodeCheckConfig {
	if m != nil {
		return m.Configs
	}
	return nil
}

func (m *CheckNodesRequest) GetNetworkOptions() *NetworkOptions {
	if m != nil {
		return m.NetworkOptions
	}
	return nil
}

// CheckNodesReply contains the result of node pre-checking.
type CheckNodesReply struct {
	Accepted bool   `protobuf:"varint,1,opt,name=accepted" json:"accepted,omitempty"`
	Err      *Error `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *CheckNodesReply) Reset()                    { *m = CheckNodesReply{} }
func (m *CheckNodesReply) String() string            { return proto.CompactTextString(m) }
func (*CheckNodesReply) ProtoMessage()               {}
func (*CheckNodesReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *CheckNodesReply) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

func (m *CheckNodesReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

// CheckItem is a check item of node pre-checking
type CheckItem struct {
	Name        string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Description string `protobuf:"bytes,2,opt,name=description" json:"description,omitempty"`
}

func (m *CheckItem) Reset()                    { *m = CheckItem{} }
func (m *CheckItem) String() string            { return proto.CompactTextString(m) }
func (*CheckItem) ProtoMessage()               {}
func (*CheckItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *CheckItem) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CheckItem) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

// ItemCheckResult contains the pre-checking reuslt of an itme
type ItemCheckResult struct {
	Item   *CheckItem `protobuf:"bytes,1,opt,name=item" json:"item,omitempty"`
	Status string     `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Err    *Error     `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
	Logs   string     `protobuf:"bytes,4,opt,name=logs" json:"logs,omitempty"`
}

func (m *ItemCheckResult) Reset()                    { *m = ItemCheckResult{} }
func (m *ItemCheckResult) String() string            { return proto.CompactTextString(m) }
func (*ItemCheckResult) ProtoMessage()               {}
func (*ItemCheckResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *ItemCheckResult) GetItem() *CheckItem {
	if m != nil {
		return m.Item
	}
	return nil
}

func (m *ItemCheckResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ItemCheckResult) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ItemCheckResult) GetLogs() string {
	if m != nil {
		return m.Logs
	}
	return ""
}

// ItemCheckResult contains the pre-checking reuslt of a node
type NodeCheckResult struct {
	NodeName string             `protobuf:"bytes,1,opt,name=nodeName" json:"nodeName,omitempty"`
	Status   string             `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Err      *Error             `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
	Items    []*ItemCheckResult `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
}

func (m *NodeCheckResult) Reset()                    { *m = NodeCheckResult{} }
func (m *NodeCheckResult) String() string            { return proto.CompactTextString(m) }
func (*NodeCheckResult) ProtoMessage()               {}
func (*NodeCheckResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *NodeCheckResult) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *NodeCheckResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *NodeCheckResult) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *NodeCheckResult) GetItems() []*ItemCheckResult {
	if m != nil {
		return m.Items
	}
	return nil
}

// GetCheckNodesResultRequest contains the request of getting nodes check result.
type GetCheckNodesResultRequest struct {
	WithLogs bool `protobuf:"varint,1,opt,name=withLogs" json:"withLogs,omitempty"`
}

func (m *GetCheckNodesResultRequest) Reset()                    { *m = GetCheckNodesResultRequest{} }
func (m *GetCheckNodesResultRequest) String() string            { return proto.CompactTextString(m) }
func (*GetCheckNodesResultRequest) ProtoMessage()               {}
func (*GetCheckNodesResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GetCheckNodesResultRequest) GetWithLogs() bool {
	if m != nil {
		return m.WithLogs
	}
	return false
}

// GetCheckNodesResultReply contains the result of nodes check
type GetCheckNodesResultReply struct {
	Status string                      `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Err    *Error                      `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
	Nodes  map[string]*NodeCheckResult `protobuf:"bytes,3,rep,name=nodes" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *GetCheckNodesResultReply) Reset()                    { *m = GetCheckNodesResultReply{} }
func (m *GetCheckNodesResultReply) String() string            { return proto.CompactTextString(m) }
func (*GetCheckNodesResultReply) ProtoMessage()               {}
func (*GetCheckNodesResultReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GetCheckNodesResultReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetCheckNodesResultReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetCheckNodesResultReply) GetNodes() map[string]*NodeCheckResult {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type NodePortRange struct {
	From uint32 `protobuf:"varint,1,opt,name=from" json:"from,omitempty"`
	To   uint32 `protobuf:"varint,2,opt,name=to" json:"to,omitempty"`
}

func (m *NodePortRange) Reset()                    { *m = NodePortRange{} }
func (m *NodePortRange) String() string            { return proto.CompactTextString(m) }
func (*NodePortRange) ProtoMessage()               {}
func (*NodePortRange) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *NodePortRange) GetFrom() uint32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *NodePortRange) GetTo() uint32 {
	if m != nil {
		return m.To
	}
	return 0
}

type Keepalived struct {
	Vip              string `protobuf:"bytes,1,opt,name=vip" json:"vip,omitempty"`
	NetInterfaceName string `protobuf:"bytes,2,opt,name=netInterfaceName" json:"netInterfaceName,omitempty"`
}

func (m *Keepalived) Reset()                    { *m = Keepalived{} }
func (m *Keepalived) String() string            { return proto.CompactTextString(m) }
func (*Keepalived) ProtoMessage()               {}
func (*Keepalived) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *Keepalived) GetVip() string {
	if m != nil {
		return m.Vip
	}
	return ""
}

func (m *Keepalived) GetNetInterfaceName() string {
	if m != nil {
		return m.NetInterfaceName
	}
	return ""
}

type Loadbalancer struct {
	Ip   string `protobuf:"bytes,1,opt,name=ip" json:"ip,omitempty"`
	Port uint32 `protobuf:"varint,2,opt,name=port" json:"port,omitempty"`
}

func (m *Loadbalancer) Reset()                    { *m = Loadbalancer{} }
func (m *Loadbalancer) String() string            { return proto.CompactTextString(m) }
func (*Loadbalancer) ProtoMessage()               {}
func (*Loadbalancer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *Loadbalancer) GetIp() string {
	if m != nil {
		return m.Ip
	}
	return ""
}

func (m *Loadbalancer) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

// KubeAPIServerConnect contains the info of how to connect to k8s API server
type KubeAPIServerConnect struct {
	// type could be ["firstMasterIP", "keepalived", "loadbalancer"]
	Type         string        `protobuf:"bytes,1,opt,name=type" json:"type,omitempty"`
	Keepalived   *Keepalived   `protobuf:"bytes,2,opt,name=keepalived" json:"keepalived,omitempty"`
	Loadbalancer *Loadbalancer `protobuf:"bytes,3,opt,name=loadbalancer" json:"loadbalancer,omitempty"`
}

func (m *KubeAPIServerConnect) Reset()                    { *m = KubeAPIServerConnect{} }
func (m *KubeAPIServerConnect) String() string            { return proto.CompactTextString(m) }
func (*KubeAPIServerConnect) ProtoMessage()               {}
func (*KubeAPIServerConnect) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *KubeAPIServerConnect) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *KubeAPIServerConnect) GetKeepalived() *Keepalived {
	if m != nil {
		return m.Keepalived
	}
	return nil
}

func (m *KubeAPIServerConnect) GetLoadbalancer() *Loadbalancer {
	if m != nil {
		return m.Loadbalancer
	}
	return nil
}

// ClusterConfig contains the configuraton of a cluster
type ClusterConfig struct {
	ClusterName          string                `protobuf:"bytes,1,opt,name=clusterName" json:"clusterName,omitempty"`
	KubeAPIServerConnect *KubeAPIServerConnect `protobuf:"bytes,2,opt,name=kubeAPIServerConnect" json:"kubeAPIServerConnect,omitempty"`
	NodePortRange        *NodePortRange        `protobuf:"bytes,3,opt,name=nodePortRange" json:"nodePortRange,omitempty"`
	NodeLabels           map[string]string     `protobuf:"bytes,4,rep,name=nodeLabels" json:"nodeLabels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NodeAnnotations      map[string]string     `protobuf:"bytes,5,rep,name=nodeAnnotations" json:"nodeAnnotations,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ImageRepository      string                `protobuf:"bytes,6,opt,name=imageRepository" json:"imageRepository,omitempty"`
	PodSubnet            string                `protobuf:"bytes,7,opt,name=podSubnet" json:"podSubnet,omitempty"`
	ServiceSubnet        string                `protobuf:"bytes,8,opt,name=serviceSubnet" json:"serviceSubnet,omitempty"`
	KubernetesVersion    string                `protobuf:"bytes,9,opt,name=kubernetesVersion" json:"kubernetesVersion,omitempty"`
}

func (m *ClusterConfig) Reset()                    { *m = ClusterConfig{} }
func (m *ClusterConfig) String() string            { return proto.CompactTextString(m) }
func (*ClusterConfig) ProtoMessage()               {}
func (*ClusterConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *ClusterConfig) GetClusterName() string {
	if m != nil {
		return m.ClusterName
	}
	return ""
}

func (m *ClusterConfig) GetKubeAPIServerConnect() *KubeAPIServerConnect {
	if m != nil {
		return m.KubeAPIServerConnect
	}
	return nil
}

func (m *ClusterConfig) GetNodePortRange() *NodePortRange {
	if m != nil {
		return m.NodePortRange
	}
	return nil
}

func (m *ClusterConfig) GetNodeLabels() map[string]string {
	if m != nil {
		return m.NodeLabels
	}
	return nil
}

func (m *ClusterConfig) GetNodeAnnotations() map[string]string {
	if m != nil {
		return m.NodeAnnotations
	}
	return nil
}

func (m *ClusterConfig) GetImageRepository() string {
	if m != nil {
		return m.ImageRepository
	}
	return ""
}

func (m *ClusterConfig) GetPodSubnet() string {
	if m != nil {
		return m.PodSubnet
	}
	return ""
}

func (m *ClusterConfig) GetServiceSubnet() string {
	if m != nil {
		return m.ServiceSubnet
	}
	return ""
}

func (m *ClusterConfig) GetKubernetesVersion() string {
	if m != nil {
		return m.KubernetesVersion
	}
	return ""
}

type Taint struct {
	Key    string `protobuf:"bytes,1,opt,name=key" json:"key,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Effect string `protobuf:"bytes,3,opt,name=effect" json:"effect,omitempty"`
}

func (m *Taint) Reset()                    { *m = Taint{} }
func (m *Taint) String() string            { return proto.CompactTextString(m) }
func (*Taint) ProtoMessage()               {}
func (*Taint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *Taint) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *Taint) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

func (m *Taint) GetEffect() string {
	if m != nil {
		return m.Effect
	}
	return ""
}

// NodeDeployConfig contains the deploy configuration for a node
type NodeDeployConfig struct {
	Node *Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
	// role cloud be ["etcd", "master", "worker", ...]
	Roles  []string          `protobuf:"bytes,2,rep,name=roles" json:"roles,omitempty"`
	Labels map[string]string `protobuf:"bytes,3,rep,name=labels" json:"labels,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Taints []*Taint          `protobuf:"bytes,4,rep,name=taints" json:"taints,omitempty"`
}

func (m *NodeDeployConfig) Reset()                    { *m = NodeDeployConfig{} }
func (m *NodeDeployConfig) String() string            { return proto.CompactTextString(m) }
func (*NodeDeployConfig) ProtoMessage()               {}
func (*NodeDeployConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *NodeDeployConfig) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (m *NodeDeployConfig) GetRoles() []string {
	if m != nil {
		return m.Roles
	}
	return nil
}

func (m *NodeDeployConfig) GetLabels() map[string]string {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *NodeDeployConfig) GetTaints() []*Taint {
	if m != nil {
		return m.Taints
	}
	return nil
}

// DeployRequest contains the request of a deploy.
type DeployRequest struct {
	NodeConfigs   []*NodeDeployConfig `protobuf:"bytes,1,rep,name=nodeConfigs" json:"nodeConfigs,omitempty"`
	ClusterConfig *ClusterConfig      `protobuf:"bytes,2,opt,name=clusterConfig" json:"clusterConfig,omitempty"`
}

func (m *DeployRequest) Reset()                    { *m = DeployRequest{} }
func (m *DeployRequest) String() string            { return proto.CompactTextString(m) }
func (*DeployRequest) ProtoMessage()               {}
func (*DeployRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *DeployRequest) GetNodeConfigs() []*NodeDeployConfig {
	if m != nil {
		return m.NodeConfigs
	}
	return nil
}

func (m *DeployRequest) GetClusterConfig() *ClusterConfig {
	if m != nil {
		return m.ClusterConfig
	}
	return nil
}

// DeployReply contains the response of a deploy request.
type DeployReply struct {
	Accepted bool   `protobuf:"varint,1,opt,name=accepted" json:"accepted,omitempty"`
	Err      *Error `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *DeployReply) Reset()                    { *m = DeployReply{} }
func (m *DeployReply) String() string            { return proto.CompactTextString(m) }
func (*DeployReply) ProtoMessage()               {}
func (*DeployReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *DeployReply) GetAccepted() bool {
	if m != nil {
		return m.Accepted
	}
	return false
}

func (m *DeployReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

// GetDeployResultRequest contains the request of getting deploy result.
type GetDeployResultRequest struct {
	WithLogs bool `protobuf:"varint,1,opt,name=withLogs" json:"withLogs,omitempty"`
}

func (m *GetDeployResultRequest) Reset()                    { *m = GetDeployResultRequest{} }
func (m *GetDeployResultRequest) String() string            { return proto.CompactTextString(m) }
func (*GetDeployResultRequest) ProtoMessage()               {}
func (*GetDeployResultRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *GetDeployResultRequest) GetWithLogs() bool {
	if m != nil {
		return m.WithLogs
	}
	return false
}

// DeployItem represents a deploy action in a node for a role.
type DeployItem struct {
	Role                string `protobuf:"bytes,1,opt,name=role" json:"role,omitempty"`
	NodeName            string `protobuf:"bytes,2,opt,name=nodeName" json:"nodeName,omitempty"`
	FailureCanBeIgnored bool   `protobuf:"varint,3,opt,name=failureCanBeIgnored" json:"failureCanBeIgnored,omitempty"`
}

func (m *DeployItem) Reset()                    { *m = DeployItem{} }
func (m *DeployItem) String() string            { return proto.CompactTextString(m) }
func (*DeployItem) ProtoMessage()               {}
func (*DeployItem) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *DeployItem) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *DeployItem) GetNodeName() string {
	if m != nil {
		return m.NodeName
	}
	return ""
}

func (m *DeployItem) GetFailureCanBeIgnored() bool {
	if m != nil {
		return m.FailureCanBeIgnored
	}
	return false
}

// DeployItemResult represents the deploy result in a node for a role.
type DeployItemResult struct {
	DeployItem *DeployItem `protobuf:"bytes,1,opt,name=deployItem" json:"deployItem,omitempty"`
	Status     string      `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
	Err        *Error      `protobuf:"bytes,3,opt,name=err" json:"err,omitempty"`
	Logs       string      `protobuf:"bytes,4,opt,name=logs" json:"logs,omitempty"`
}

func (m *DeployItemResult) Reset()                    { *m = DeployItemResult{} }
func (m *DeployItemResult) String() string            { return proto.CompactTextString(m) }
func (*DeployItemResult) ProtoMessage()               {}
func (*DeployItemResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *DeployItemResult) GetDeployItem() *DeployItem {
	if m != nil {
		return m.DeployItem
	}
	return nil
}

func (m *DeployItemResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *DeployItemResult) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *DeployItemResult) GetLogs() string {
	if m != nil {
		return m.Logs
	}
	return ""
}

// GetDeployResultReply represents the result of a deploy
type GetDeployResultReply struct {
	Status string              `protobuf:"bytes,1,opt,name=status" json:"status,omitempty"`
	Err    *Error              `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
	Items  []*DeployItemResult `protobuf:"bytes,3,rep,name=items" json:"items,omitempty"`
}

func (m *GetDeployResultReply) Reset()                    { *m = GetDeployResultReply{} }
func (m *GetDeployResultReply) String() string            { return proto.CompactTextString(m) }
func (*GetDeployResultReply) ProtoMessage()               {}
func (*GetDeployResultReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{26} }

func (m *GetDeployResultReply) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *GetDeployResultReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *GetDeployResultReply) GetItems() []*DeployItemResult {
	if m != nil {
		return m.Items
	}
	return nil
}

// FetchKubeConfigRequest contains the request of getting kube config.
type FetchKubeConfigRequest struct {
	Node *Node `protobuf:"bytes,1,opt,name=node" json:"node,omitempty"`
}

func (m *FetchKubeConfigRequest) Reset()                    { *m = FetchKubeConfigRequest{} }
func (m *FetchKubeConfigRequest) String() string            { return proto.CompactTextString(m) }
func (*FetchKubeConfigRequest) ProtoMessage()               {}
func (*FetchKubeConfigRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{27} }

func (m *FetchKubeConfigRequest) GetNode() *Node {
	if m != nil {
		return m.Node
	}
	return nil
}

// FetchKubeConfigReply contains the response of getting kube config.
type FetchKubeConfigReply struct {
	KubeConfig []byte `protobuf:"bytes,1,opt,name=kubeConfig,proto3" json:"kubeConfig,omitempty"`
	Err        *Error `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
}

func (m *FetchKubeConfigReply) Reset()                    { *m = FetchKubeConfigReply{} }
func (m *FetchKubeConfigReply) String() string            { return proto.CompactTextString(m) }
func (*FetchKubeConfigReply) ProtoMessage()               {}
func (*FetchKubeConfigReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{28} }

func (m *FetchKubeConfigReply) GetKubeConfig() []byte {
	if m != nil {
		return m.KubeConfig
	}
	return nil
}

func (m *FetchKubeConfigReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

// CalicoOptions options for checking requirements for deploying calico network.
type CalicoOptions struct {
	// if checkConnectivityAll = true, check connectivity between each pair of nodes bidirectionally.
	CheckConnectivityAll bool `protobuf:"varint,1,opt,name=checkConnectivityAll" json:"checkConnectivityAll,omitempty"`
	// EncapsulationMode could be ["vxlan","ipip","none"].
	EncapsulationMode        string `protobuf:"bytes,2,opt,name=encapsulationMode" json:"encapsulationMode,omitempty"`
	VxlanPort                uint32 `protobuf:"varint,10,opt,name=vxlanPort" json:"vxlanPort,omitempty"`
	InitialPodIPs            string `protobuf:"bytes,11,opt,name=initialPodIPs" json:"initialPodIPs,omitempty"`
	VethMtu                  uint32 `protobuf:"varint,12,opt,name=vethMtu" json:"vethMtu,omitempty"`
	NodeIPDetectionMethod    string `protobuf:"bytes,20,opt,name=nodeIPDetectionMethod" json:"nodeIPDetectionMethod,omitempty"`
	NodeIPDetectionInterface string `protobuf:"bytes,21,opt,name=nodeIPDetectionInterface" json:"nodeIPDetectionInterface,omitempty"`
}

func (m *CalicoOptions) Reset()                    { *m = CalicoOptions{} }
func (m *CalicoOptions) String() string            { return proto.CompactTextString(m) }
func (*CalicoOptions) ProtoMessage()               {}
func (*CalicoOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{29} }

func (m *CalicoOptions) GetCheckConnectivityAll() bool {
	if m != nil {
		return m.CheckConnectivityAll
	}
	return false
}

func (m *CalicoOptions) GetEncapsulationMode() string {
	if m != nil {
		return m.EncapsulationMode
	}
	return ""
}

func (m *CalicoOptions) GetVxlanPort() uint32 {
	if m != nil {
		return m.VxlanPort
	}
	return 0
}

func (m *CalicoOptions) GetInitialPodIPs() string {
	if m != nil {
		return m.InitialPodIPs
	}
	return ""
}

func (m *CalicoOptions) GetVethMtu() uint32 {
	if m != nil {
		return m.VethMtu
	}
	return 0
}

func (m *CalicoOptions) GetNodeIPDetectionMethod() string {
	if m != nil {
		return m.NodeIPDetectionMethod
	}
	return ""
}

func (m *CalicoOptions) GetNodeIPDetectionInterface() string {
	if m != nil {
		return m.NodeIPDetectionInterface
	}
	return ""
}

// NetworkOptions options for deploying network. affects checked items.
type NetworkOptions struct {
	NetworkType string `protobuf:"bytes,1,opt,name=NetworkType" json:"NetworkType,omitempty"`
	// options for a specified network type. Starts from 10 to reserve field 2-9.
	CalicoOptions *CalicoOptions `protobuf:"bytes,10,opt,name=calicoOptions" json:"calicoOptions,omitempty"`
}

func (m *NetworkOptions) Reset()                    { *m = NetworkOptions{} }
func (m *NetworkOptions) String() string            { return proto.CompactTextString(m) }
func (*NetworkOptions) ProtoMessage()               {}
func (*NetworkOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{30} }

func (m *NetworkOptions) GetNetworkType() string {
	if m != nil {
		return m.NetworkType
	}
	return ""
}

func (m *NetworkOptions) GetCalicoOptions() *CalicoOptions {
	if m != nil {
		return m.CalicoOptions
	}
	return nil
}

// CheckNetworkRequirementRequest nodes and network options when checking
type CheckNetworkRequirementRequest struct {
	Nodes   []*Node         `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
	Options *NetworkOptions `protobuf:"bytes,2,opt,name=options" json:"options,omitempty"`
}

func (m *CheckNetworkRequirementRequest) Reset()                    { *m = CheckNetworkRequirementRequest{} }
func (m *CheckNetworkRequirementRequest) String() string            { return proto.CompactTextString(m) }
func (*CheckNetworkRequirementRequest) ProtoMessage()               {}
func (*CheckNetworkRequirementRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{31} }

func (m *CheckNetworkRequirementRequest) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *CheckNetworkRequirementRequest) GetOptions() *NetworkOptions {
	if m != nil {
		return m.Options
	}
	return nil
}

type ConnectivityCheckResult struct {
	SourceNodeName      string             `protobuf:"bytes,1,opt,name=SourceNodeName" json:"SourceNodeName,omitempty"`
	DestinationNodeName string             `protobuf:"bytes,2,opt,name=DestinationNodeName" json:"DestinationNodeName,omitempty"`
	Status              string             `protobuf:"bytes,3,opt,name=status" json:"status,omitempty"`
	Err                 *Error             `protobuf:"bytes,4,opt,name=err" json:"err,omitempty"`
	Items               []*ItemCheckResult `protobuf:"bytes,5,rep,name=items" json:"items,omitempty"`
}

func (m *ConnectivityCheckResult) Reset()                    { *m = ConnectivityCheckResult{} }
func (m *ConnectivityCheckResult) String() string            { return proto.CompactTextString(m) }
func (*ConnectivityCheckResult) ProtoMessage()               {}
func (*ConnectivityCheckResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{32} }

func (m *ConnectivityCheckResult) GetSourceNodeName() string {
	if m != nil {
		return m.SourceNodeName
	}
	return ""
}

func (m *ConnectivityCheckResult) GetDestinationNodeName() string {
	if m != nil {
		return m.DestinationNodeName
	}
	return ""
}

func (m *ConnectivityCheckResult) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *ConnectivityCheckResult) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *ConnectivityCheckResult) GetItems() []*ItemCheckResult {
	if m != nil {
		return m.Items
	}
	return nil
}

// CheckNetworkRequirementsReply
type CheckNetworkRequirementsReply struct {
	Passed         bool                       `protobuf:"varint,1,opt,name=passed" json:"passed,omitempty"`
	Err            *Error                     `protobuf:"bytes,2,opt,name=err" json:"err,omitempty"`
	Nodes          []*NodeCheckResult         `protobuf:"bytes,3,rep,name=nodes" json:"nodes,omitempty"`
	Connectivities []*ConnectivityCheckResult `protobuf:"bytes,4,rep,name=connectivities" json:"connectivities,omitempty"`
}

func (m *CheckNetworkRequirementsReply) Reset()                    { *m = CheckNetworkRequirementsReply{} }
func (m *CheckNetworkRequirementsReply) String() string            { return proto.CompactTextString(m) }
func (*CheckNetworkRequirementsReply) ProtoMessage()               {}
func (*CheckNetworkRequirementsReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{33} }

func (m *CheckNetworkRequirementsReply) GetPassed() bool {
	if m != nil {
		return m.Passed
	}
	return false
}

func (m *CheckNetworkRequirementsReply) GetErr() *Error {
	if m != nil {
		return m.Err
	}
	return nil
}

func (m *CheckNetworkRequirementsReply) GetNodes() []*NodeCheckResult {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *CheckNetworkRequirementsReply) GetConnectivities() []*ConnectivityCheckResult {
	if m != nil {
		return m.Connectivities
	}
	return nil
}

func init() {
	proto.RegisterType((*Auth)(nil), "protos.Auth")
	proto.RegisterType((*SSH)(nil), "protos.SSH")
	proto.RegisterType((*Node)(nil), "protos.Node")
	proto.RegisterType((*Error)(nil), "protos.Error")
	proto.RegisterType((*TestConnectionRequest)(nil), "protos.TestConnectionRequest")
	proto.RegisterType((*TestConnectionReply)(nil), "protos.TestConnectionReply")
	proto.RegisterType((*NodeCheckConfig)(nil), "protos.NodeCheckConfig")
	proto.RegisterType((*CheckNodesRequest)(nil), "protos.CheckNodesRequest")
	proto.RegisterType((*CheckNodesReply)(nil), "protos.CheckNodesReply")
	proto.RegisterType((*CheckItem)(nil), "protos.CheckItem")
	proto.RegisterType((*ItemCheckResult)(nil), "protos.ItemCheckResult")
	proto.RegisterType((*NodeCheckResult)(nil), "protos.NodeCheckResult")
	proto.RegisterType((*GetCheckNodesResultRequest)(nil), "protos.GetCheckNodesResultRequest")
	proto.RegisterType((*GetCheckNodesResultReply)(nil), "protos.GetCheckNodesResultReply")
	proto.RegisterType((*NodePortRange)(nil), "protos.NodePortRange")
	proto.RegisterType((*Keepalived)(nil), "protos.Keepalived")
	proto.RegisterType((*Loadbalancer)(nil), "protos.Loadbalancer")
	proto.RegisterType((*KubeAPIServerConnect)(nil), "protos.KubeAPIServerConnect")
	proto.RegisterType((*ClusterConfig)(nil), "protos.ClusterConfig")
	proto.RegisterType((*Taint)(nil), "protos.Taint")
	proto.RegisterType((*NodeDeployConfig)(nil), "protos.NodeDeployConfig")
	proto.RegisterType((*DeployRequest)(nil), "protos.DeployRequest")
	proto.RegisterType((*DeployReply)(nil), "protos.DeployReply")
	proto.RegisterType((*GetDeployResultRequest)(nil), "protos.GetDeployResultRequest")
	proto.RegisterType((*DeployItem)(nil), "protos.DeployItem")
	proto.RegisterType((*DeployItemResult)(nil), "protos.DeployItemResult")
	proto.RegisterType((*GetDeployResultReply)(nil), "protos.GetDeployResultReply")
	proto.RegisterType((*FetchKubeConfigRequest)(nil), "protos.FetchKubeConfigRequest")
	proto.RegisterType((*FetchKubeConfigReply)(nil), "protos.FetchKubeConfigReply")
	proto.RegisterType((*CalicoOptions)(nil), "protos.CalicoOptions")
	proto.RegisterType((*NetworkOptions)(nil), "protos.NetworkOptions")
	proto.RegisterType((*CheckNetworkRequirementRequest)(nil), "protos.CheckNetworkRequirementRequest")
	proto.RegisterType((*ConnectivityCheckResult)(nil), "protos.ConnectivityCheckResult")
	proto.RegisterType((*CheckNetworkRequirementsReply)(nil), "protos.CheckNetworkRequirementsReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for DeployContoller service

type DeployContollerClient interface {
	TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionReply, error)
	CheckNodes(ctx context.Context, in *CheckNodesRequest, opts ...grpc.CallOption) (*CheckNodesReply, error)
	GetCheckNodesResult(ctx context.Context, in *GetCheckNodesResultRequest, opts ...grpc.CallOption) (*GetCheckNodesResultReply, error)
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error)
	GetDeployResult(ctx context.Context, in *GetDeployResultRequest, opts ...grpc.CallOption) (*GetDeployResultReply, error)
	FetchKubeConfig(ctx context.Context, in *FetchKubeConfigRequest, opts ...grpc.CallOption) (*FetchKubeConfigReply, error)
	CheckNetworkRequirements(ctx context.Context, in *CheckNetworkRequirementRequest, opts ...grpc.CallOption) (*CheckNetworkRequirementsReply, error)
}

type deployContollerClient struct {
	cc *grpc.ClientConn
}

func NewDeployContollerClient(cc *grpc.ClientConn) DeployContollerClient {
	return &deployContollerClient{cc}
}

func (c *deployContollerClient) TestConnection(ctx context.Context, in *TestConnectionRequest, opts ...grpc.CallOption) (*TestConnectionReply, error) {
	out := new(TestConnectionReply)
	err := grpc.Invoke(ctx, "/protos.DeployContoller/TestConnection", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployContollerClient) CheckNodes(ctx context.Context, in *CheckNodesRequest, opts ...grpc.CallOption) (*CheckNodesReply, error) {
	out := new(CheckNodesReply)
	err := grpc.Invoke(ctx, "/protos.DeployContoller/CheckNodes", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployContollerClient) GetCheckNodesResult(ctx context.Context, in *GetCheckNodesResultRequest, opts ...grpc.CallOption) (*GetCheckNodesResultReply, error) {
	out := new(GetCheckNodesResultReply)
	err := grpc.Invoke(ctx, "/protos.DeployContoller/GetCheckNodesResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployContollerClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error) {
	out := new(DeployReply)
	err := grpc.Invoke(ctx, "/protos.DeployContoller/Deploy", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployContollerClient) GetDeployResult(ctx context.Context, in *GetDeployResultRequest, opts ...grpc.CallOption) (*GetDeployResultReply, error) {
	out := new(GetDeployResultReply)
	err := grpc.Invoke(ctx, "/protos.DeployContoller/GetDeployResult", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployContollerClient) FetchKubeConfig(ctx context.Context, in *FetchKubeConfigRequest, opts ...grpc.CallOption) (*FetchKubeConfigReply, error) {
	out := new(FetchKubeConfigReply)
	err := grpc.Invoke(ctx, "/protos.DeployContoller/FetchKubeConfig", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deployContollerClient) CheckNetworkRequirements(ctx context.Context, in *CheckNetworkRequirementRequest, opts ...grpc.CallOption) (*CheckNetworkRequirementsReply, error) {
	out := new(CheckNetworkRequirementsReply)
	err := grpc.Invoke(ctx, "/protos.DeployContoller/CheckNetworkRequirements", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for DeployContoller service

type DeployContollerServer interface {
	TestConnection(context.Context, *TestConnectionRequest) (*TestConnectionReply, error)
	CheckNodes(context.Context, *CheckNodesRequest) (*CheckNodesReply, error)
	GetCheckNodesResult(context.Context, *GetCheckNodesResultRequest) (*GetCheckNodesResultReply, error)
	Deploy(context.Context, *DeployRequest) (*DeployReply, error)
	GetDeployResult(context.Context, *GetDeployResultRequest) (*GetDeployResultReply, error)
	FetchKubeConfig(context.Context, *FetchKubeConfigRequest) (*FetchKubeConfigReply, error)
	CheckNetworkRequirements(context.Context, *CheckNetworkRequirementRequest) (*CheckNetworkRequirementsReply, error)
}

func RegisterDeployContollerServer(s *grpc.Server, srv DeployContollerServer) {
	s.RegisterService(&_DeployContoller_serviceDesc, srv)
}

func _DeployContoller_TestConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployContollerServer).TestConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeployContoller/TestConnection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployContollerServer).TestConnection(ctx, req.(*TestConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployContoller_CheckNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNodesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployContollerServer).CheckNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeployContoller/CheckNodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployContollerServer).CheckNodes(ctx, req.(*CheckNodesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployContoller_GetCheckNodesResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCheckNodesResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployContollerServer).GetCheckNodesResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeployContoller/GetCheckNodesResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployContollerServer).GetCheckNodesResult(ctx, req.(*GetCheckNodesResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployContoller_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployContollerServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeployContoller/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployContollerServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployContoller_GetDeployResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDeployResultRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployContollerServer).GetDeployResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeployContoller/GetDeployResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployContollerServer).GetDeployResult(ctx, req.(*GetDeployResultRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployContoller_FetchKubeConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchKubeConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployContollerServer).FetchKubeConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeployContoller/FetchKubeConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployContollerServer).FetchKubeConfig(ctx, req.(*FetchKubeConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeployContoller_CheckNetworkRequirements_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckNetworkRequirementRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeployContollerServer).CheckNetworkRequirements(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.DeployContoller/CheckNetworkRequirements",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeployContollerServer).CheckNetworkRequirements(ctx, req.(*CheckNetworkRequirementRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DeployContoller_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.DeployContoller",
	HandlerType: (*DeployContollerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TestConnection",
			Handler:    _DeployContoller_TestConnection_Handler,
		},
		{
			MethodName: "CheckNodes",
			Handler:    _DeployContoller_CheckNodes_Handler,
		},
		{
			MethodName: "GetCheckNodesResult",
			Handler:    _DeployContoller_GetCheckNodesResult_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _DeployContoller_Deploy_Handler,
		},
		{
			MethodName: "GetDeployResult",
			Handler:    _DeployContoller_GetDeployResult_Handler,
		},
		{
			MethodName: "FetchKubeConfig",
			Handler:    _DeployContoller_FetchKubeConfig_Handler,
		},
		{
			MethodName: "CheckNetworkRequirements",
			Handler:    _DeployContoller_CheckNetworkRequirements_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "deploy_controller.proto",
}

func init() { proto.RegisterFile("deploy_controller.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1641 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x58, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0xef, 0xda, 0xce, 0xd7, 0x71, 0x9c, 0xa4, 0x13, 0x27, 0xd9, 0xbf, 0xff, 0x6d, 0x1a, 0x8d,
	0x9a, 0x2a, 0x2a, 0x10, 0x15, 0xb7, 0x42, 0x6d, 0x0a, 0x48, 0x69, 0x5a, 0x52, 0xf7, 0x23, 0xa4,
	0x9b, 0xa8, 0xbd, 0x42, 0x68, 0xb3, 0x9e, 0xc4, 0x2b, 0x6f, 0x76, 0x96, 0x9d, 0xb1, 0x5b, 0x5f,
	0x71, 0x05, 0xe2, 0x1e, 0x21, 0xf1, 0x3a, 0x3c, 0x01, 0xdc, 0xf3, 0x04, 0xf0, 0x0c, 0x5c, 0xa0,
	0xf9, 0x5a, 0xcf, 0x3a, 0x6b, 0x12, 0x1a, 0xae, 0xbc, 0x73, 0xbe, 0xe6, 0x77, 0xce, 0x9c, 0x39,
	0x73, 0x8e, 0x61, 0xa5, 0x4d, 0x92, 0x88, 0x0e, 0xbe, 0x0e, 0x68, 0xcc, 0x53, 0x1a, 0x45, 0x24,
	0xdd, 0x4c, 0x52, 0xca, 0x29, 0x9a, 0x94, 0x3f, 0x0c, 0xbf, 0x86, 0xca, 0x76, 0x8f, 0x77, 0x10,
	0x82, 0x0a, 0x1f, 0x24, 0xc4, 0x75, 0xd6, 0x9c, 0x8d, 0x19, 0x4f, 0x7e, 0xa3, 0x55, 0x80, 0x20,
	0x25, 0x6d, 0x12, 0xf3, 0xd0, 0x8f, 0xdc, 0x92, 0xe4, 0x58, 0x14, 0xd4, 0x80, 0xe9, 0x1e, 0x23,
	0x69, 0xec, 0x9f, 0x12, 0xb7, 0x2c, 0xb9, 0xd9, 0x1a, 0x3f, 0x84, 0xf2, 0xc1, 0xc1, 0x53, 0x61,
	0x36, 0xa1, 0x29, 0x97, 0x66, 0x6b, 0x9e, 0xfc, 0x46, 0x6b, 0x50, 0xf1, 0x7b, 0xbc, 0x23, 0x0d,
	0x56, 0x9b, 0xb3, 0x0a, 0x10, 0xdb, 0x14, 0x30, 0x3c, 0xc9, 0xc1, 0x2d, 0xa8, 0xec, 0xd1, 0x36,
	0x11, 0xda, 0xd2, 0xb8, 0x06, 0x25, 0xbe, 0xd1, 0x1c, 0x94, 0xc2, 0x44, 0x83, 0x29, 0x85, 0x09,
	0xba, 0x0e, 0x65, 0xc6, 0x3a, 0x72, 0xff, 0x6a, 0xb3, 0x6a, 0x8c, 0x1d, 0x1c, 0x3c, 0xf5, 0x04,
	0x1d, 0xbf, 0x81, 0x89, 0x27, 0x69, 0x4a, 0x53, 0xb4, 0x0c, 0x93, 0x29, 0xf1, 0x19, 0x8d, 0xb5,
	0x35, 0xbd, 0x12, 0xf4, 0x36, 0xe1, 0x7e, 0x68, 0x1c, 0xd4, 0x2b, 0xe1, 0xfc, 0x71, 0xf8, 0xee,
	0x25, 0xe1, 0x1d, 0xda, 0x66, 0xda, 0x3d, 0x8b, 0x82, 0x1f, 0xc0, 0xd2, 0x21, 0x61, 0x7c, 0x87,
	0xc6, 0x31, 0x09, 0x78, 0x48, 0x63, 0x8f, 0x7c, 0xd3, 0x23, 0x4c, 0xba, 0x17, 0xd3, 0xb6, 0x02,
	0x6d, 0xb9, 0x27, 0x1c, 0xf2, 0x24, 0x07, 0xef, 0xc1, 0xe2, 0xa8, 0x6a, 0x12, 0x0d, 0x04, 0x92,
	0xc4, 0x67, 0x8c, 0xb4, 0xa5, 0xea, 0xb4, 0xa7, 0x57, 0xe8, 0x06, 0x94, 0x49, 0x9a, 0xea, 0x70,
	0xd5, 0x8c, 0x3d, 0xe9, 0x95, 0x27, 0x38, 0xb8, 0x05, 0xf3, 0xc2, 0xfa, 0x4e, 0x87, 0x04, 0xdd,
	0x1d, 0x1a, 0x1f, 0x87, 0x27, 0xe7, 0x83, 0x40, 0x75, 0x98, 0x48, 0x69, 0x44, 0x98, 0x5b, 0x5a,
	0x2b, 0x6f, 0xcc, 0x78, 0x6a, 0x81, 0xbf, 0x77, 0xe0, 0xaa, 0xb4, 0x23, 0x24, 0x99, 0x71, 0xe9,
	0x63, 0x98, 0x0a, 0xa4, 0x5d, 0xe6, 0x3a, 0x6b, 0xe5, 0x8d, 0x6a, 0x73, 0xc5, 0x36, 0x68, 0xed,
	0xeb, 0x19, 0x39, 0xf4, 0x39, 0xcc, 0xc5, 0x84, 0xbf, 0xa5, 0x69, 0xf7, 0xcb, 0x44, 0xb8, 0xc8,
	0x34, 0xfe, 0xe5, 0x4c, 0x33, 0xc7, 0xf5, 0x46, 0xa4, 0xf1, 0x1e, 0xcc, 0xdb, 0x38, 0x44, 0x7c,
	0x1a, 0x30, 0xed, 0x07, 0x01, 0x49, 0x78, 0x16, 0xa1, 0x6c, 0x7d, 0x7e, 0x8c, 0xb6, 0x61, 0x46,
	0xda, 0x6b, 0x71, 0x72, 0x5a, 0x98, 0x57, 0x6b, 0x50, 0x6d, 0x13, 0x16, 0xa4, 0xa1, 0x04, 0xa0,
	0x93, 0xc1, 0x26, 0xe1, 0xef, 0x1c, 0x98, 0x17, 0xea, 0xd2, 0x8e, 0x47, 0x58, 0x2f, 0xe2, 0x68,
	0x1d, 0x2a, 0x21, 0x27, 0xa7, 0x3a, 0xce, 0x57, 0xcd, 0xc6, 0xd9, 0x56, 0x9e, 0x64, 0x8b, 0xa3,
	0x65, 0xdc, 0xe7, 0x3d, 0x66, 0x92, 0x4c, 0xad, 0x0c, 0xec, 0xf2, 0x38, 0xd8, 0x02, 0x69, 0x44,
	0x4f, 0x98, 0x5b, 0x51, 0x48, 0xc5, 0x37, 0xfe, 0xc9, 0xb1, 0xce, 0x5b, 0xe3, 0x68, 0xc0, 0xb4,
	0x38, 0xd5, 0xbd, 0xa1, 0x57, 0xd9, 0xfa, 0xfd, 0x37, 0xff, 0x08, 0x26, 0x04, 0x7a, 0xb1, 0x7b,
	0xee, 0xd0, 0x47, 0x82, 0xe0, 0x29, 0x29, 0x7c, 0x1f, 0x1a, 0xbb, 0x84, 0xdb, 0xa7, 0x26, 0xb9,
	0x3a, 0x87, 0x1a, 0x30, 0xfd, 0x36, 0xe4, 0x9d, 0x17, 0x54, 0x26, 0x91, 0x3c, 0x3d, 0xb3, 0xc6,
	0x7f, 0x38, 0xe0, 0x16, 0xaa, 0xea, 0x6b, 0xa1, 0xe1, 0x3b, 0x45, 0xf0, 0xc7, 0x1e, 0x39, 0xda,
	0x86, 0x09, 0x11, 0x03, 0x71, 0x79, 0x05, 0xfc, 0x0f, 0x8c, 0xc8, 0xb8, 0x9d, 0x64, 0x32, 0xb3,
	0x27, 0x31, 0x4f, 0x07, 0x9e, 0xd2, 0x6c, 0xbc, 0x02, 0x18, 0x12, 0xd1, 0x02, 0x94, 0xbb, 0x64,
	0xa0, 0x61, 0x88, 0x4f, 0x11, 0xa1, 0xbe, 0x1f, 0xf5, 0x88, 0x46, 0x71, 0xf6, 0x5a, 0x98, 0x08,
	0x49, 0xa9, 0xad, 0xd2, 0x7d, 0x07, 0xdf, 0x85, 0x9a, 0xe0, 0xee, 0xd3, 0x94, 0x7b, 0x7e, 0x7c,
	0x22, 0x8b, 0xdc, 0x71, 0x4a, 0x4f, 0x4d, 0x89, 0x14, 0xdf, 0xa2, 0xc8, 0x71, 0x2a, 0x8d, 0xd6,
	0xbc, 0x12, 0xa7, 0xf8, 0x19, 0xc0, 0x73, 0x42, 0x12, 0x3f, 0x0a, 0xfb, 0xa4, 0x2d, 0x70, 0xf4,
	0xc3, 0xc4, 0xe0, 0xe8, 0x87, 0x09, 0xba, 0x0d, 0x0b, 0x31, 0xe1, 0xad, 0x98, 0x93, 0xf4, 0xd8,
	0x0f, 0x54, 0x1a, 0xa8, 0xc3, 0x3e, 0x43, 0xc7, 0x4d, 0x98, 0x7d, 0x41, 0xfd, 0xf6, 0x91, 0x1f,
	0xf9, 0x71, 0x40, 0x52, 0x5d, 0x50, 0x9d, 0xac, 0xa0, 0x9a, 0x92, 0x5d, 0x1a, 0x96, 0x6c, 0xfc,
	0xb3, 0x03, 0xf5, 0xe7, 0xbd, 0x23, 0xb2, 0xbd, 0xdf, 0x3a, 0x20, 0x69, 0x9f, 0xa4, 0xba, 0x76,
	0x15, 0x3e, 0x1b, 0x4d, 0x80, 0x6e, 0x06, 0x56, 0x47, 0x06, 0x99, 0xc8, 0x0c, 0xdd, 0xf0, 0x2c,
	0x29, 0x74, 0x1f, 0x66, 0x23, 0x0b, 0x94, 0x4e, 0xca, 0xba, 0xd1, 0xb2, 0x01, 0x7b, 0x39, 0x49,
	0xfc, 0x57, 0x05, 0x6a, 0x3b, 0x51, 0x8f, 0x71, 0x09, 0x4a, 0xd5, 0xbe, 0x6a, 0xa0, 0x08, 0xd6,
	0x75, 0xb0, 0x49, 0x68, 0x1f, 0xea, 0xdd, 0x02, 0x6f, 0x34, 0xd6, 0x6b, 0x19, 0xd6, 0x02, 0x19,
	0xaf, 0x50, 0x13, 0x3d, 0x84, 0x5a, 0x6c, 0x9f, 0xaa, 0x76, 0x60, 0xc9, 0x4e, 0x88, 0x8c, 0xe9,
	0xe5, 0x65, 0xd1, 0x13, 0x00, 0x41, 0x78, 0xe1, 0x1f, 0x91, 0xc8, 0x5c, 0xb6, 0xf5, 0xac, 0x94,
	0xd8, 0xbe, 0x49, 0x3b, 0x4a, 0x4e, 0xe5, 0xa9, 0xa5, 0x88, 0x0e, 0x61, 0x5e, 0xac, 0xb6, 0xe3,
	0x98, 0x72, 0x5f, 0xd5, 0xdc, 0x09, 0x69, 0xeb, 0xf6, 0x78, 0x5b, 0x96, 0xb0, 0x32, 0x38, 0x6a,
	0x02, 0x6d, 0xc0, 0x7c, 0x78, 0xea, 0x9f, 0x10, 0x8f, 0x24, 0x94, 0x85, 0x9c, 0xa6, 0x03, 0x77,
	0x52, 0x46, 0x74, 0x94, 0x8c, 0xae, 0xc1, 0x4c, 0x42, 0xdb, 0x07, 0xbd, 0xa3, 0x98, 0x70, 0x77,
	0x4a, 0xca, 0x0c, 0x09, 0xe8, 0x26, 0xd4, 0x18, 0x49, 0xfb, 0x61, 0x40, 0xb4, 0xc4, 0xb4, 0x94,
	0xc8, 0x13, 0xd1, 0x87, 0x70, 0x55, 0xc4, 0x37, 0x8d, 0x09, 0x27, 0xec, 0x35, 0x49, 0x99, 0xa8,
	0xc5, 0x33, 0x52, 0xf2, 0x2c, 0xa3, 0xf1, 0x99, 0x2a, 0x84, 0x56, 0x40, 0x0a, 0xee, 0x68, 0xdd,
	0xbe, 0xa3, 0x33, 0xd6, 0x55, 0x6c, 0x3c, 0x82, 0x7a, 0x51, 0x0c, 0xfe, 0x8d, 0x0d, 0xbc, 0x0b,
	0x13, 0x87, 0x7e, 0x18, 0xf3, 0x8b, 0x2a, 0x89, 0x72, 0x46, 0x8e, 0x8f, 0x45, 0xb6, 0xa9, 0x9e,
	0x42, 0xaf, 0xf0, 0x9f, 0x0e, 0x2c, 0x08, 0x34, 0x8f, 0x65, 0xc3, 0x76, 0xb9, 0x67, 0x1c, 0x7d,
	0x0a, 0x93, 0x91, 0xca, 0x26, 0x55, 0xfb, 0x6e, 0xda, 0x9a, 0xf6, 0x0e, 0x9b, 0x76, 0x32, 0x69,
	0x1d, 0xb4, 0x0e, 0x93, 0x5c, 0xf8, 0x64, 0x72, 0x31, 0x2b, 0xae, 0xd2, 0x53, 0x4f, 0x33, 0x1b,
	0x0f, 0xa0, 0xfa, 0x9e, 0x91, 0xc7, 0x3f, 0x38, 0x50, 0x53, 0x30, 0xcc, 0xf3, 0xb0, 0x05, 0x55,
	0xe1, 0xcf, 0x4e, 0xae, 0xcd, 0x70, 0xc7, 0xc1, 0xf6, 0x6c, 0x61, 0x71, 0xf9, 0x02, 0x3b, 0xb3,
	0xf5, 0x3d, 0x5e, 0x2a, 0x4c, 0x7b, 0x2f, 0x2f, 0x8b, 0x9f, 0x41, 0xd5, 0x20, 0xb9, 0x74, 0x93,
	0x71, 0x0f, 0x96, 0x77, 0x09, 0x37, 0xe6, 0x2e, 0xfa, 0xfa, 0xc5, 0x00, 0x4a, 0xc5, 0xf4, 0x26,
	0xe2, 0x0c, 0x4d, 0x45, 0x15, 0xdf, 0xb9, 0xd7, 0xbd, 0x34, 0xf2, 0xba, 0xdf, 0x81, 0xc5, 0x63,
	0x3f, 0x8c, 0x7a, 0x29, 0xd9, 0xf1, 0xe3, 0x47, 0xa4, 0x75, 0x12, 0xd3, 0x94, 0xb4, 0x65, 0x72,
	0x4d, 0x7b, 0x45, 0x2c, 0xfc, 0xa3, 0x03, 0x0b, 0xc3, 0x0d, 0x75, 0x03, 0xd1, 0x04, 0x68, 0x67,
	0x34, 0x9d, 0x6f, 0x59, 0xd1, 0xb6, 0xa4, 0x2d, 0xa9, 0xff, 0xb6, 0xab, 0xf9, 0x16, 0xea, 0x67,
	0x62, 0x77, 0xa9, 0xe7, 0x7f, 0xd3, 0x74, 0x2f, 0xe5, 0x7c, 0x2e, 0x8d, 0xba, 0x6e, 0xda, 0x97,
	0x2d, 0x58, 0xfe, 0x82, 0xf0, 0xa0, 0x23, 0xaa, 0xbe, 0x4e, 0x95, 0x0b, 0x77, 0xf4, 0x6f, 0xa0,
	0x7e, 0x46, 0x57, 0x80, 0x5f, 0x05, 0xe8, 0x66, 0x24, 0xa9, 0x3f, 0xeb, 0x59, 0x94, 0xf3, 0x33,
	0xea, 0x97, 0x12, 0xd4, 0x76, 0xfc, 0x28, 0x0c, 0xa8, 0x6e, 0x8c, 0x51, 0x13, 0xea, 0x81, 0x6e,
	0xb8, 0xe5, 0xf4, 0xd0, 0x0f, 0xf9, 0x60, 0x3b, 0x8a, 0x74, 0x56, 0x15, 0xf2, 0x44, 0x55, 0x25,
	0x71, 0xe0, 0x27, 0xac, 0x17, 0xc9, 0x3a, 0xf7, 0x52, 0x78, 0xa3, 0xce, 0xec, 0x2c, 0x43, 0xd4,
	0xf1, 0xfe, 0xbb, 0xc8, 0x8f, 0xc5, 0x03, 0xe5, 0x82, 0xec, 0x02, 0x86, 0x04, 0x51, 0xc7, 0xc3,
	0x38, 0x14, 0xf3, 0xdf, 0x3e, 0x6d, 0xb7, 0xf6, 0x99, 0x5b, 0x55, 0x75, 0x3c, 0x47, 0x44, 0x2e,
	0x4c, 0xf5, 0x09, 0xef, 0xbc, 0xe4, 0x3d, 0x77, 0x56, 0x5a, 0x30, 0x4b, 0x74, 0x0f, 0x96, 0x44,
	0xc8, 0x5a, 0xfb, 0x8f, 0x09, 0x57, 0xd3, 0x8f, 0x9a, 0xa8, 0xdc, 0xba, 0xb4, 0x53, 0xcc, 0x44,
	0x5b, 0xe0, 0x8e, 0x30, 0xb2, 0xa6, 0xc6, 0x5d, 0x92, 0x8a, 0x63, 0xf9, 0x98, 0xc2, 0x5c, 0x7e,
	0xd8, 0x10, 0x1d, 0x82, 0xa6, 0x1c, 0x0e, 0x9b, 0x17, 0x9b, 0x24, 0x4b, 0x8a, 0x1d, 0x76, 0x19,
	0x07, 0xbb, 0xa4, 0xd8, 0x4c, 0x2f, 0x2f, 0x8b, 0xfb, 0xb0, 0xaa, 0x1a, 0x4c, 0x65, 0x50, 0xa4,
	0x51, 0x98, 0x92, 0x53, 0x12, 0x67, 0xe5, 0x00, 0x9b, 0xd6, 0x54, 0xd5, 0xb9, 0x7c, 0x4a, 0x29,
	0x16, 0xba, 0x03, 0x53, 0xf4, 0x42, 0xa3, 0x93, 0x11, 0xc3, 0xbf, 0x3b, 0xb0, 0x62, 0x1f, 0xbd,
	0x3d, 0x20, 0xdc, 0x82, 0xb9, 0x03, 0xda, 0x4b, 0x03, 0xb2, 0x97, 0x1f, 0x13, 0x46, 0xa8, 0xa2,
	0x9c, 0x3c, 0x26, 0x8c, 0x87, 0xb1, 0xcc, 0x87, 0xbd, 0x7c, 0xd5, 0x29, 0x62, 0x59, 0x17, 0xb4,
	0x5c, 0x74, 0x41, 0x2b, 0xe7, 0x8f, 0x17, 0x13, 0x17, 0x1a, 0x2f, 0x7e, 0x73, 0xe0, 0xfa, 0x98,
	0xb0, 0xb2, 0xcb, 0x0d, 0xd0, 0x02, 0x89, 0x3d, 0x29, 0x8c, 0x6f, 0xe3, 0xd5, 0xc9, 0xec, 0xc2,
	0x5c, 0x30, 0x0c, 0x73, 0x48, 0xcc, 0x3b, 0x79, 0x23, 0xcb, 0x8e, 0xe2, 0x43, 0xf0, 0x46, 0xd4,
	0x9a, 0xbf, 0x56, 0x60, 0x3e, 0x7b, 0xd6, 0xb8, 0xfc, 0x7b, 0x06, 0xed, 0xc1, 0x5c, 0xfe, 0xcf,
	0x01, 0x74, 0x3d, 0x7b, 0x7e, 0x8b, 0xfe, 0x6f, 0x68, 0xfc, 0x7f, 0x1c, 0x3b, 0x89, 0x06, 0xf8,
	0x0a, 0x7a, 0x04, 0x30, 0x9c, 0x76, 0xd0, 0xff, 0x72, 0x13, 0xaa, 0x3d, 0xe4, 0x37, 0x56, 0x8a,
	0x58, 0xca, 0xc6, 0x57, 0xb0, 0x58, 0x30, 0x34, 0x21, 0xfc, 0x8f, 0x13, 0x95, 0xb2, 0xba, 0x76,
	0xde, 0xd4, 0x85, 0xaf, 0xa0, 0x4f, 0x60, 0x52, 0x45, 0x01, 0x2d, 0xe5, 0x8b, 0xb4, 0x31, 0xb2,
	0x38, 0x4a, 0x56, 0x7a, 0xaf, 0x60, 0x7e, 0xe4, 0xc9, 0x40, 0xab, 0xd6, 0x76, 0x05, 0xef, 0x70,
	0xe3, 0xda, 0x58, 0x7e, 0x66, 0x72, 0xa4, 0x90, 0x0f, 0x4d, 0x16, 0xbf, 0x0e, 0x43, 0x93, 0x45,
	0x2f, 0x00, 0xbe, 0x82, 0xba, 0xe0, 0x8e, 0x4b, 0x5b, 0x74, 0x2b, 0x1f, 0xf3, 0x71, 0xf5, 0xa2,
	0xb1, 0x7e, 0x8e, 0x9c, 0x39, 0xa9, 0x23, 0xf5, 0xb7, 0xde, 0xdd, 0xbf, 0x03, 0x00, 0x00, 0xff,
	0xff, 0xd2, 0x78, 0xa5, 0x72, 0xf8, 0x13, 0x00, 0x00,
}
